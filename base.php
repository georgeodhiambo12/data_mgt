<!DOCTYPE html>
<html>
<head>
    <title>Upload, Filter, and Download Excel Data</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <h2>Upload Excel Files</h2>
    <form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post" enctype="multipart/form-data">
        Select Excel files to upload:
        <input type="file" name="files[]" id="files" multiple>
        <input type="submit" value="Upload Files" name="submit">
    </form>

    <!-- Add links/buttons for users to choose between viewing the charts or the filtered Excel file -->
    <div>
        <a href="?view=charts">View Charts</a> | <a href="?view=filtered">View Filtered Excel File</a>
    </div>

    <?php
    
     // Database connection
    $servername = "localhost";
    $username = "tenderso_george";
    $password = "iVL?F1jO&.VP";
    $dbname = "tenderso_data_mgt";
     
    // Establish database connection using PDO
    try {
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUsername, $dbPassword);
        // Set PDO error mode to exception
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch(PDOException $e) {
        echo "Connection failed: " . $e->getMessage();
    }
    
    // Including the autoload file generated by Composer
    require_once 'vendor/autoload.php';

    // Function to handle file upload and data processing
    function handleFileUpload() {
        // Check if files are uploaded
        if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_FILES["files"])) {
            $target_dir = "uploads/";

            // Creating the directory if it doesn't exist
            if (!file_exists($target_dir)) {
                mkdir($target_dir, 0777, true);
            }

            // Loop through the uploaded files
            foreach($_FILES['files']['tmp_name'] as $key => $tmp_name ){
                $file_name = $_FILES['files']['name'][$key];
                $file_size = $_FILES['files']['size'][$key];
                $file_tmp = $_FILES['files']['tmp_name'][$key];
                $file_error = $_FILES['files']['error'][$key];
                
                // Check if file is uploaded successfully
                if ($file_error === UPLOAD_ERR_OK) {
                    $target_file = $target_dir . basename($file_name);
                    $fileType = strtolower(pathinfo($target_file, PATHINFO_EXTENSION));

                    // Check the file size and type
                    if ($file_size > 5000000 || !in_array($fileType, ["xlsx", "xls"])) {
                        echo "Sorry, only Excel files up to 5MB are allowed.";
                    } else {
                        if (move_uploaded_file($file_tmp, $target_file)) {
                            echo "The file " . htmlspecialchars(basename($file_name)) . " has been uploaded.";

                            // Convert the Excel file to CSV
                            $csvFile = $target_dir . pathinfo($file_name, PATHINFO_FILENAME) . ".csv";
                            convertExcelToCSV($target_file, $csvFile);

                            // Display the filter form
                            displayFilterForm($csvFile);
                        } else {
                            echo "Sorry, there was an error uploading your file.";
                        }
                    }
                } else {
                    echo "File upload error: $file_error";
                }
            }
        }
    }

    // Function to convert Excel file to CSV
    function convertExcelToCSV($excelFile, $csvFile) {
        $reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader("Xlsx");
        $spreadsheet = $reader->load($excelFile);

        // Set date format for output (assuming date is in column A)
        $spreadsheet->getActiveSheet()->getStyle('A')->getNumberFormat()->setFormatCode('dd-mm-yyyy');

        $writer = \PhpOffice\PhpSpreadsheet\IOFactory::createWriter($spreadsheet, 'Csv');
        $writer->save($csvFile);
    }

    // Function to display filter form
    function displayFilterForm($csvFile) {
        echo "<h2>Filter Data:</h2>";
        echo "<form method='post' action='" . htmlspecialchars($_SERVER["PHP_SELF"]) . "'>";
        echo "<h3>Select Heading:</h3>";
        echo "<select name='heading[]' id='heading' multiple>";
        
        // Sample headings
        $headings = [
            'DATE MID', 'YEAR', 'MONTH', 'DAY', 'AM/PM', 'QUARTER', 'PAYMENT MODE', 'AMOUNT', 'SUB PLAN',
            'WEEK', 'EMAIL ADDRESS', 'OCCURRENCE', 'DUPLICATE', 'STATUS', 'FREQUENCY', 'RE DATE', 'REG DATE', 'REG-PAY DATE', 'SUB PLAN SHIFT', 'COUNTRY'
        ];

        // Display heading options
        foreach ($headings as $heading) {
            echo "<option value='$heading'>$heading</option>";
        }

        echo "</select>";

        // Add search inputs for each heading
        echo "<div id='search-fields'>";
        echo "</div>";
        echo "<button type='button' onclick='addSearchField()'>Add Search Field</button>";
        
        echo "<input type='submit' name='filter' value='Filter'>";
        echo "</form>";
    }

    // JavaScript function to add search fields for multiple headings
    echo "<script>";
    echo "function addSearchField() {";
    echo "    var select = document.getElementById('heading');";
    echo "    var selectedHeadings = Array.from(select.selectedOptions).map(option => option.value);";
    echo "    var searchFields = document.getElementById('search-fields');";
    echo "    searchFields.innerHTML = '';"; // Clear existing search fields
    echo "    selectedHeadings.forEach(heading => {";
    echo "        var label = document.createElement('label');";
    echo "        label.textContent = 'Search Value for ' + heading + ': ';";
    echo "        var input = document.createElement('input');";
    echo "        input.type = 'text';";
    echo "        input.name = 'search[' + heading + ']';";
    echo "        searchFields.appendChild(label);";
    echo "        searchFields.appendChild(input);";
    echo "    });";
    echo "}";
    echo "</script>";

    // Function to filter data by the selected headings and search values
    function filterData($csvFile, $selectedHeadings, $searchValues) {
        global $pdo;
    
        if (isset($_POST['filter']) && isset($_POST['heading'])) {
            $selectedHeadings = $_POST['heading'];
            $searchValues = isset($_POST['search']) ? $_POST['search'] : [];
    
            if (($handle = fopen($csvFile, "r")) !== FALSE) {
                $header = fgetcsv($handle, 1000, ","); // Get the header row
    
                // Prepare the SQL statement for checking duplicates
                $checkSql = "SELECT COUNT(*) FROM tendersodata WHERE `DATE MID` = ? AND `YEAR` = ? AND `MONTH` = ? AND `DAY` = ? AND `AM/PM` = ? AND `QUARTER` = ? AND `PAYMENT MODE` = ? AND `AMOUNT` = ? AND `SUB PLAN` = ? AND `WEEK` = ? AND `EMAIL ADDRESS` = ? AND `OCCURRENCE` = ? AND `DUPLICATE` = ? AND `STATUS` = ? AND `FREQUENCY` = ? AND `RE DATE` = ? AND `REG DATE` = ? AND `REG-PAY DATE` = ? AND `SUB PLAN SHIFT` = ? AND `COUNTRY` = ?";
                $checkStmt = $pdo->prepare($checkSql);
    
                // Prepare the SQL statement for insertion
                $sql = "INSERT INTO tendersodata (`DATE MID`, `YEAR`, `MONTH`, `DAY`, `AM/PM`, `QUARTER`, `PAYMENT MODE`, `AMOUNT`, `SUB PLAN`, `WEEK`, `EMAIL ADDRESS`, `OCCURRENCE`, `DUPLICATE`, `STATUS`, `FREQUENCY`, `RE DATE`, `REG DATE`, `REG-PAY DATE`, `SUB PLAN SHIFT`, `COUNTRY`)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $pdo->prepare($sql);
    
                while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
                    $matched = true;
                    foreach ($selectedHeadings as $index => $heading) {
                        $searchValue = !empty($searchValues[$heading]) ? $searchValues[$heading] : '';
                        $dataValue = isset($header[$index]) ? $data[$index] : null;
    
                        if ($dataValue !== null && $searchValue !== '' && stripos($dataValue, $searchValue) === false) {
                            $matched = false;
                            break;
                        }
                    }
    
                    if ($matched) {
                        // Extract year from the date string
                        $dateParts = explode('-', $data[0]); // Assuming date format is "DD-MM-YYYY"
                        $year = end($dateParts);
    
                        // Check for duplicate record
                        $checkStmt->execute([
                            $data[0], $year, $data[2], $data[3], $data[4], $data[5], $data[6], $data[7], $data[8], $data[9], 
                            $data[10], $data[11], $data[12], $data[13], $data[14], $data[15], $data[16], $data[17], $data[18], $data[19]
                        ]);
                        $count = $checkStmt->fetchColumn();
    
                        if ($count == 0) {
                            // Insert record if no duplicate is found
                            $stmt->execute([
                                $data[0], $year, $data[2], $data[3], $data[4], $data[5], $data[6], $data[7], $data[8], $data[9], 
                                $data[10], $data[11], $data[12], $data[13], $data[14], $data[15], $data[16], $data[17], $data[18], $data[19]
                            ]);
                        }
                    }
                }
                fclose($handle);
            } else {
                echo "<p>Failed to open CSV file.</p>";
            }
            // Generate charts
            generateCharts($csvFile, $selectedHeadings[0]); // Passing only the first selected heading for chart generation
        }
    }
    
    // Function to generate charts
    function generateCharts($csvFile, $selectedHeading) {
        // Load CSV file into an array
        $data = array_map('str_getcsv', file($csvFile));

        // Extract data for the selected heading
        $selectedColumnIndex = array_search($selectedHeading, $data[0]);
        $selectedColumnData = array_column($data, $selectedColumnIndex);

        // Count occurrences of each unique value in the selected column
        $valueCounts = array_count_values($selectedColumnData);

        // Chart data
        $labels = array_keys($valueCounts);
        $counts = array_values($valueCounts);

        // Chart configuration
        $chartData = json_encode([
            'labels' => $labels,
            'datasets' => [
                [
                    'label' => 'Frequency',
                    'data' => $counts,
                    'backgroundColor' => [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                    ],
                    'borderColor' => [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                    ],
                    'borderWidth' => 1,
                ],
            ],
        ]);

        // Display the chart
        echo "<h2>Chart:</h2>";
        echo "<div style='width: 80%; margin: auto;'>";
        echo "<canvas id='myChart' width='800' height='400'></canvas>";
        echo "</div>";
        echo "<script>";
        echo "var ctx = document.getElementById('myChart').getContext('2d');";
        echo "var myChart = new Chart(ctx, {";
        echo "    type: 'bar',";
        echo "    data: $chartData,";
        echo "    options: {";
        echo "        responsive: true,"; // Make the chart responsive
        echo "        maintainAspectRatio: false,"; // Prevent the aspect ratio from being maintained
        echo "    }";
        echo "});";
        echo "</script>";
    }

    // Calling the function to handle file upload
    handleFileUpload();

    // Path to the uploaded CSV file
    $csvFile = 'uploads/Basil.csv';

    // Filtering the data based on the selected headings and search values
    if (isset($_POST['filter']) && isset($_POST['heading'])) {
        filterData($csvFile, $_POST['heading'], isset($_POST['search']) ? $_POST['search'] : []);
    }

    // Display either the charts or the filtered Excel file based on the user's choice
    if (isset($_GET['view'])) {
        if ($_GET['view'] === 'charts') {
            // Display charts
            generateCharts($csvFile, 'DATE MID'); // Pass a default heading for chart generation
        } elseif ($_GET['view'] === 'filtered') {
            // Display filtered Excel file
            header('Content-Type: application/csv');
            header('Content-Disposition: attachment; filename="filtered_data.csv"');
            readfile($csvFile);
            exit;
        }
    }
    ?>

    <script>
    // JavaScript function to add search fields dynamically based on selected headings
    function addSearchField() {
        var select = document.getElementById('heading');
        var selectedHeadings = Array.from(select.selectedOptions).map(option => option.value);
        var searchFields = document.getElementById('search-fields');
        searchFields.innerHTML = ''; // Clear existing search fields
        selectedHeadings.forEach(heading => {
            var label = document.createElement('label');
            label.textContent = 'Search Value for ' + heading + ': ';
            var input = document.createElement('input');
            input.type = 'text';
            input.name = 'search[' + heading + ']';
            searchFields.appendChild(label);
            searchFields.appendChild(input);
        });
    }
    </script>

</body>
</html>